Advanced Python
Trainer: Prashant Nair
---------------------------------------------------------------------------

Agenda

	- Creating Profile Page properly (Model)
	- Adding path to upload images
	- Adding User profile pic
	- Setting up default profile
	- Using Django Signals to auto-create profile whenever user gets created
	- Django REST Framework (APIs)

Creating Profile Page properly (Model)
========================================

1. In users app go to models.py



from django.db import models
from django.contrib.auth.models import User

# Create your models here.

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)  #on_delete will ensure profile gets deleted whenever a user is deleted
    image = models.ImageField(default='profilepic.jpg', upload_to='profile_pictures')
    location= models.CharField(max_length=100)

    def __str__(self) -> str:
        return self.user.username
		
		
2. Make necessary changes in Django app by applying models which are just now created (To create tables at backend)

python manage.py makemigrations

python manage.py migrate

python manage.py runserver

3.CHeck in admin page if profile model is regsitereed

admin.py (in users app)

from django.contrib import admin
from .models import Profile

# Register your models here.
admin.site.register(Profile)


http://127.0.0.1:8000/admin


Adding path to upload images in the profile
==============================================

Go to admin page add profile

	- Select user
	- Choose an image button(Select some image from the computer)
	- Location (City)
	
Save it and you will se it will save your data


*******IMP --- Check where is the pic saved(To find the same we can check from the backend)****

Open Shell 

python manage.py shell


from django.contrib.auth.models import User

user = User.objects.filter(username='admin').first()

user

user.profile

user.profile.image

*******************************************END**************************************************

Lets change the media location. The same shall be done using settings.py via MEDIA ROOT parameter


settings.py

from pathlib import Path
import os

MEDIA_ROOT = os.path.join(BASE_DIR, 'pictures')
MEDIA_URL = '/pictures/'



Now lets delete the previously created profile and recreate a new profile. You will observe the profile images will be saved in pictures folder


Adding User profile pictures in template
==========================================

1. Update profile template

templates/users/profile.html

<h1>{{ user.username }}</h1>
<img src="{{ user.profile.image.url }}" />

2. Go to urls.py in mysite and statis file location for image

from django.conf import settings
from django.conf.urls.static import static

urlpatterns += [

] + static(settings.MEDIA_URL, document_root=settings.MEDIA_ROOT)



Django Signals
================

- Django provides SignalDispatcher that can help the system understand and track changes and apply any operation whenever any changes happen
- Lets see example of auto create profile whenever user gets registered

1. Create signals.py in user app

from django.db.models.signals import post_save
from django.contrib.auth.models import User
from django.dispatch import receiver
from .models import Profile

@receiver(post_save,sender=User)
def build_profile(sender,instance,created,**kwargs):
    if created:
        Profile.objects.create(user=instance)

@receiver(post_save,sender=User)
def save_profile(sender, instance, **kwargs):
    instance.profile.save()
	
	

2. apps.py in user app

from django.apps import AppConfig


class UsersConfig(AppConfig):
    default_auto_field = "django.db.models.BigAutoField"
    name = "users"

    def ready(self):
        import users.signals



Django REST framework
======================================================================
1. Install django framework using the following command

	pip install djangorestframework
	pip install docutils==0.16

2. Create a new project

	Create a folder named rest
	Inside this folder we will create our mysite project and movies app using the following command
	
		django-admin startproject mysite
		
		django-admin startapp movies
		
3. To enable REST framework we need to install the same in our project. This can be done using settings.py


		INSTALLED_APPS = [
			'rest_framework',
			'movies.apps.MoviesConfig',
			....
		]
		
4. Lets build models.py for movies

models.py (movies app)

from django.db import models

# Create your models here.

class Moviedata(models.Model):
    name = models.CharField(max_length=200)
    duration = models.FloatField()
    rating = models.FloatField()


    def __str__(self) -> str:
        return self.name

5. Make migrations

	python manage.py makemigrations
	
	python manage.py sqlmigrate movies 0001
	
	python manage.py migrate
	
6. Now we will create a superuser

	python manage.py createsuperuser
	
7. Access the admin page (http://127.0.0.1:8000/admin). Note that there is no model visible. So lets add the model in admin.py


admin.py (movies)

from django.contrib import admin
from .models import Moviedata

# Register your models here.
admin.site.register(Moviedata)


8. Refresh and check if its visible. Add one record for an example

Now we will create an API that will display the data and share the data via api 

9. Lets create serializer which is required for data transfer in motion

serializers.py (movies app)

from rest_framework import serializers
from .models import Moviedata

class MovieSerializer(serializers.ModelSerializer):

    class Meta:
        model = Moviedata
        fields = ['id','name','duration','rating']
		
		
		
10.  Now lets create a view for API that can display the data

views.py (movies app)

from django.shortcuts import render
from rest_framework import viewsets
from .serializers import MovieSerializer
from .models import Moviedata

# Create your views here.

class MovieViewSet(viewsets.ModelViewSet):
    queryset = Moviedata.objects.all()
    serializer_class = MovieSerializer
	
	
11. Setup URL pattern for REST. This is done using ROUTER

urls.py (mysite)

from django.contrib import admin
from django.urls import path,include
from rest_framework import routers
from movies.views import MovieViewSet



router = routers.SimpleRouter()
router.register('movies', MovieViewSet)

urlpatterns = [
    path("admin/", admin.site.urls),
    path("", include(router.urls)),
]
		
11. Now lets check if the API view is working

http://127.0.0.1:8000/movies

Advanced Python Programming
Trainer: Prashant Nair
===========================================================================================================================================================

Agenda
--------
Django Templates
Django Template Language
Namespacing and Removing Hardcoded URL

Lab1: Reading data from table in a view
==========================================

views.py on food app
====================

from django.shortcuts import render
from django.http import HttpResponse
from .models import Item

# Create your views here.

def index(request):
    item_list= Item.objects.all()
    return HttpResponse(item_list)

def prashant(request):
    pass

def item(request):
    return HttpResponse("This is an item page")


models.py in food app
======================

from django.db import models

# Create your models here.

class Item(models.Model):

    def __str__(self):
        return self.item_name

    item_name= models.CharField(max_length=200) #varchar(200)
    item_desc=models.CharField(max_length=200) #varchar(200)
    item_price=models.IntegerField() #int






Templates
===========

DTL ---- Django Template Language

variables =========== {{ variableName }}

Tags ================ {% %}


Lab2: Creating templates folder
==================================

Create templates folder inside food app
Create food folder inside templates folder
Add index.html page inside food folder

Modify views.py in food app

def index(request):
    return render(request, 'food/index.html')


Lab3: Creating and using Context Variable
===========================================

context variable is a dictionary object

views.py

from django.shortcuts import render
from django.http import HttpResponse
from .models import Item

# Create your views here.

def index(request):
    context = {
        'name' : 'Prashant',
        'messages' : ['Welcome to Django Template Language', ' Test1', 'Test2']
    }
    return render(request, 'food/index.html', context)


index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome {{ name }}</title>
</head>
<body>
    <h1>This is a sample page</h1>
    <ul>
        {% for message in messages %}
        <li> {{ message }} </li>
    {% endfor %}

    </ul>
    
</body>
</html>


Lab4: Accessing elements dynamically
======================================

Demo1: Using variable values from URL

views.py

from django.shortcuts import render,redirect
from django.http import HttpResponse
from .models import Item
from django.template import loader



def detail(request, item_id):
	return HttpResponse("This is item no : %s" % item_id)


urls.py (food app)

from django.urls import path
from . import views

urlpatterns=[
    #http://127.0.0.1:8000/food
    path('',views.index, name="index"),
    #http://127.0.0.1:8000/food/items
    path('item/',views.item, name="items"),
    #http://127.0.0.1:8000/food/1
    path('<int:item_id>',views.detail, name="detail")
]



Demo2 : Fetching relevant record from db object

Create a new template html 

templates/food/detail.html

detail.html

<h1>{{ itemDetails.item_name }}</h1>
<h2>{{ itemDetails.item_desc }}</h2>
<h3>{{ itemDetails.item_price }}</h3>

views.py

def detail(request,item_id):
    item = Item.objects.get(pk=item_id) #select * from item where id=item_id
    context = {
        'itemDetails' : item,
    }
    return render(request, 'food/detail.html', context)



lab 5: Create link in home page to access details of each item
==============================================================

index.html

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Welcome {{ name }}</title>
</head>
<body>
    <h1>This is a sample page</h1>
    <ul>
        {% for message in messages %}
        <li> <a href="{{ message.id }}">{{message.item_name}} </a> </li>
    {% endfor %}

    </ul>
    
</body>
</html>





Assignment
============

Case Study: Book Library System

Overview
---------
The goal of this project is to create a simple web application using Django that allows users to browse through a collection of books. Each book will have details like title, author, publication date, and genre.


Objectives
-----------
1. Learn how to set up a Django project and application.
2. Understand and implement Django models to define data structures.
3. Utilize Django views to handle the business logic and interaction with models.
4. Use Django templates to render HTML pages that display data from models.

Requirements
-----------------
1. Setup a Django Project and App
2. Create a new Django project named LibraryProject.
3. Inside this project, create a new Django app named books.
4. Define Models

In the books app, define a model Book with the following fields:
title: A string field, for the book's title.
author: A string field, for the book's author.
publication_date: A date field, for the date the book was published.
genre: A string field, for the genre of the book.

5. Migrations
Run migrations to create the database schema based on the defined model.

6. Create Views
Create a view to list all books in the database.
Create a view to display detailed information about a single book.

7. Templates

Create a template for displaying the list of books.
Create a template for displaying detailed information about a single book.

8. URL Routing

Set up URL patterns for the two views:
A route for the home page that lists all books.
A route for book details that displays more detailed information when a book's title is clicked.












